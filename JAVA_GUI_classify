/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template

 */

package ttaiit.blogspot.com;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.FileWriter;

/**
 *
 * @author ACER
 */
public class Product extends javax.swing.JFrame {

    /**
     * Creates new form Product
     */
    public Product() {
        initComponents();
        loadDataFromFile();
        loadDataFromFile1();
        loadDataFromFile2();
        loadDataFromFile3();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        TFProduct = new javax.swing.JTextField();
        cdCategory = new javax.swing.JComboBox<>();
        TFPrice = new javax.swing.JTextField();
        bAdd = new javax.swing.JButton();
        bUpdate = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        iMassage = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbProduct = new javax.swing.JTable();
        massage = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbProduct1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbProduct2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbProduct3 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Product Name");

        jLabel2.setText("Category");

        jLabel3.setText("Price");

        TFProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFProductActionPerformed(evt);
            }
        });

        cdCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "electronic", "art", "food" }));
        cdCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cdCategoryActionPerformed(evt);
            }
        });

        bAdd.setText("Add");
        bAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddActionPerformed(evt);
            }
        });

        bUpdate.setText("Update");
        bUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUpdateActionPerformed(evt);
            }
        });

        bDelete.setText("Delete");
        bDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bDeleteMouseClicked(evt);
            }
        });
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });

        iMassage.setForeground(new java.awt.Color(204, 0, 51));

        tbProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "category", "Price"
            }
        ));
        tbProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbProductMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbProduct);

        massage.setForeground(new java.awt.Color(204, 0, 0));

        tbProduct1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producr Name", "Category", "Price"
            }
        ));
        jScrollPane1.setViewportView(tbProduct1);

        tbProduct2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producr Name", "Category", "Price"
            }
        ));
        jScrollPane3.setViewportView(tbProduct2);

        tbProduct3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producr Name", "Category", "Price"
            }
        ));
        jScrollPane4.setViewportView(tbProduct3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(bAdd)
                                        .addGap(46, 46, 46)
                                        .addComponent(bUpdate))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(41, 41, 41)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(cdCategory, 0, 111, Short.MAX_VALUE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(TFPrice)
                                                    .addGap(1, 1, 1)))
                                            .addComponent(TFProduct, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bDelete))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(iMassage, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(massage, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(TFProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(cdCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(TFPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bUpdate)
                            .addComponent(bAdd)
                            .addComponent(bDelete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(iMassage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(massage, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>                        
    
    private void loadDataFromFile() {
        DefaultTableModel model = (DefaultTableModel) tbProduct.getModel();
        model.setRowCount(0);  // Clear existing rows

        try (BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\ACER\\OneDrive - Rajamangala University of Technology Lanna\\Documents\\Ostest.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                model.addRow(data);
            }
        } catch (IOException e) {
            e.printStackTrace();  // Handle IOException appropriately
        }
    }

    private void saveDataToFile() {
    DefaultTableModel model = (DefaultTableModel) tbProduct.getModel();

        try (PrintWriter writer = new PrintWriter("C:\\Users\\ACER\\OneDrive - Rajamangala University of Technology Lanna\\Documents\\Ostest.txt")) {
            int rowCount = model.getRowCount();
            int colCount = model.getColumnCount();

            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < colCount; j++) {
                    writer.print(model.getValueAt(i, j));
                    if (j < colCount - 1) {
                        writer.print(",");
                    }
                }
                writer.println();
            }
        } catch (IOException e) {
            e.printStackTrace();  // Handle IOException appropriately
        }
    }
    private void addDataToFile(String productName, String category, String price) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\Users\\ACER\\OneDrive - Rajamangala University of Technology Lanna\\Documents\\Ostest.txt", true))) {
            // Append new data to the file
            writer.write(productName + "," + category + "," + price);
            writer.newLine();
        } catch (IOException e) {
            e.printStackTrace();  // Handle IOException appropriately
        }
    }

    private void TFProductActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void cdCategoryActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void bAddActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        massage.setText("");
        DefaultTableModel model = (DefaultTableModel) tbProduct.getModel();
        DefaultTableModel additionalModel1 = getAdditionalTableModel1();  // For Category "art"
        DefaultTableModel additionalModel2 = getAdditionalTableModel2(); // For Category "electronic"
        DefaultTableModel additionalModel3 = getAdditionalTableModel3(); // For Category "food"

        if (!TFProduct.getText().trim().equals("")) {
            String selectedCategory = cdCategory.getSelectedItem().toString();
            Object[] rowData = {TFProduct.getText(), selectedCategory, TFPrice.getText()};
            model.addRow(rowData);

            if (isArtCategory(selectedCategory)) {
                additionalModel1.addRow(rowData);
                saveDataToFile1(); 
            } else if (isElectronicCategory(selectedCategory)) {
                additionalModel2.addRow(rowData);
                saveDataToFile2(); 
            } else if (isfoodCategory(selectedCategory)) {
                additionalModel3.addRow(rowData);
                saveDataToFile3(); 
            }
            addDataToFile(TFProduct.getText(), selectedCategory, TFPrice.getText());
        } else {
            massage.setText("Product Name should not be left blank");
        }
    }                                    

    private boolean isArtCategory(String category) {
        return "art".equals(category);
    }

    private boolean isElectronicCategory(String category) {
        return "electronic".equals(category);
    }
    private boolean isfoodCategory(String category) {
        return "food".equals(category);
    }

    private DefaultTableModel getAdditionalTableModel2() {
        return (DefaultTableModel) tbProduct2.getModel();
    }
    private DefaultTableModel getAdditionalTableModel1() {
        return (DefaultTableModel) tbProduct1.getModel();
    }
    private DefaultTableModel getAdditionalTableModel3() {
        return (DefaultTableModel) tbProduct3.getModel();
    }


    private void bUpdateActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        massage.setText("");
        DefaultTableModel model = (DefaultTableModel) tbProduct.getModel();

        if (tbProduct.getSelectedRow() == -1) {
            if (tbProduct.getRowCount() == 0) {
                massage.setText("table is empty");
            } else {
                massage.setText("you must select a product");
            }
        } else {
            // Get the selected row data
            String updatedProductName = TFProduct.getText();
            String updatedCategory = cdCategory.getSelectedItem().toString();
            String updatedPrice = TFPrice.getText();

            // Get the current data in the selected row
            String currentProductName = model.getValueAt(tbProduct.getSelectedRow(), 0).toString();
            String currentCategory = model.getValueAt(tbProduct.getSelectedRow(), 1).toString();
            String currentPrice = model.getValueAt(tbProduct.getSelectedRow(), 2).toString();

            // Update the data in tbProduct
            model.setValueAt(updatedProductName, tbProduct.getSelectedRow(), 0);
            model.setValueAt(updatedCategory, tbProduct.getSelectedRow(), 1);
            model.setValueAt(updatedPrice, tbProduct.getSelectedRow(), 2);

            // Update the data in tbProduct1, tbProduct2, and tbProduct3 based on conditions
            updateOtherTables(currentProductName, currentCategory, currentPrice, updatedProductName, updatedCategory, updatedPrice);

            saveDataToFile();
        }
    }                                       


    private void bDeleteMouseClicked(java.awt.event.MouseEvent evt) {                                     
        // TDO add your handling code here:
    }                                    

    private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                        
           // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tbProduct.getModel();

       if (tbProduct.getSelectedRow() == -1) {
           if (tbProduct.getRowCount() == 0) {
               massage.setText("table is empty");
           } else {
               massage.setText("you must select a product");
           }
       } else {
           // Get the data in the selected row
           String deletedProductName = model.getValueAt(tbProduct.getSelectedRow(), 0).toString();
           String deletedCategory = model.getValueAt(tbProduct.getSelectedRow(), 1).toString();
           String deletedPrice = model.getValueAt(tbProduct.getSelectedRow(), 2).toString();

           // Remove the row from tbProduct
           model.removeRow(tbProduct.getSelectedRow());

           // Remove the corresponding row from tbProduct1, tbProduct2, and tbProduct3
           deleteFromOtherTables(deletedProductName, deletedCategory, deletedPrice);

           saveDataToFile();
       }
    }                                       
    
    private void updateOtherTables(String currentProductName, String currentCategory, String currentPrice,
        String updatedProductName, String updatedCategory, String updatedPrice) {
        DefaultTableModel model1 = (DefaultTableModel) tbProduct1.getModel();
        DefaultTableModel model2 = (DefaultTableModel) tbProduct2.getModel();
        DefaultTableModel model3 = (DefaultTableModel) tbProduct3.getModel();

        // Check and update tbProduct1
        if (isArtCategory(currentCategory)) {
            for (int i = 0; i < model1.getRowCount(); i++) {
                if (currentProductName.equals(model1.getValueAt(i, 0)) && currentCategory.equals(model1.getValueAt(i, 1))
                        && currentPrice.equals(model1.getValueAt(i, 2))) {
                    model1.setValueAt(updatedProductName, i, 0);
                    model1.setValueAt(updatedCategory, i, 1);
                    model1.setValueAt(updatedPrice, i, 2);
                    saveDataToFile1(); 
                    break;
                }
            }
        }

        // Check and update tbProduct2
        if (isElectronicCategory(currentCategory)) {
            for (int i = 0; i < model2.getRowCount(); i++) {
                if (currentProductName.equals(model2.getValueAt(i, 0)) && currentCategory.equals(model2.getValueAt(i, 1))
                        && currentPrice.equals(model2.getValueAt(i, 2))) {
                    model2.setValueAt(updatedProductName, i, 0);
                    model2.setValueAt(updatedCategory, i, 1);
                    model2.setValueAt(updatedPrice, i, 2);
                    saveDataToFile2(); 
                    break;
                }
            }
        }

        // Check and update tbProduct3
        if (isfoodCategory(currentCategory)) {
            for (int i = 0; i < model3.getRowCount(); i++) {
                if (currentProductName.equals(model3.getValueAt(i, 0)) && currentCategory.equals(model3.getValueAt(i, 1))
                        && currentPrice.equals(model3.getValueAt(i, 2))) {
                    model3.setValueAt(updatedProductName, i, 0);
                    model3.setValueAt(updatedCategory, i, 1);
                    model3.setValueAt(updatedPrice, i, 2);
                    saveDataToFile3(); 
                    break;
                }
            }
        }
    }

    private void deleteFromOtherTables(String deletedProductName, String deletedCategory, String deletedPrice) {
        DefaultTableModel model1 = (DefaultTableModel) tbProduct1.getModel();
        DefaultTableModel model2 = (DefaultTableModel) tbProduct2.getModel();
        DefaultTableModel model3 = (DefaultTableModel) tbProduct3.getModel();

        // Delete from tbProduct1
        if (isArtCategory(deletedCategory)) {
            for (int i = 0; i < model1.getRowCount(); i++) {
                if (deletedProductName.equals(model1.getValueAt(i, 0)) && deletedCategory.equals(model1.getValueAt(i, 1))
                        && deletedPrice.equals(model1.getValueAt(i, 2))) {
                    model1.removeRow(i);
                    saveDataToFile1(); 
                    break;
                }
            }
        }

        // Delete from tbProduct2
        if (isElectronicCategory(deletedCategory)) {
            for (int i = 0; i < model2.getRowCount(); i++) {
                if (deletedProductName.equals(model2.getValueAt(i, 0)) && deletedCategory.equals(model2.getValueAt(i, 1))
                        && deletedPrice.equals(model2.getValueAt(i, 2))) {
                    model2.removeRow(i);
                    saveDataToFile2(); 
                    break;
                }
            }
        }

        // Delete from tbProduct3
        if (isfoodCategory(deletedCategory)) {
            for (int i = 0; i < model3.getRowCount(); i++) {
                if (deletedProductName.equals(model3.getValueAt(i, 0)) && deletedCategory.equals(model3.getValueAt(i, 1))
                        && deletedPrice.equals(model3.getValueAt(i, 2))) {
                    model3.removeRow(i);
                    saveDataToFile3(); 
                    break;
                }
            }
        }
    }
    
    private void tbProductMouseClicked(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here0
        DefaultTableModel model = (DefaultTableModel) tbProduct.getModel();
        TFProduct.setText(model.getValueAt(tbProduct.getSelectedRow(),0).toString());
        cdCategory.setSelectedItem(model.getValueAt(tbProduct.getSelectedRow(),1).toString());
        TFPrice.setText(model.getValueAt(tbProduct.getSelectedRow(),2).toString()); 
        
    }                                      
    
    private void saveDataToFile1() {
        DefaultTableModel model = (DefaultTableModel) tbProduct1.getModel();

        try (PrintWriter writer = new PrintWriter("C:\\Users\\ACER\\OneDrive - Rajamangala University of Technology Lanna\\Documents\\osart.txt")) {
            int rowCount = model.getRowCount();
            int colCount = model.getColumnCount();

            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < colCount; j++) {
                    writer.print(model.getValueAt(i, j));
                    if (j < colCount - 1) {
                        writer.print(",");
                    }
                }
                writer.println();
            }
        } catch (IOException e) {
            e.printStackTrace();  // Handle IOException appropriately
        }
    }
    
    private void saveDataToFile2() {
        DefaultTableModel model = (DefaultTableModel) tbProduct2.getModel();

        try (PrintWriter writer = new PrintWriter("C:\\Users\\ACER\\OneDrive - Rajamangala University of Technology Lanna\\Documents\\oselectronic.txt")) {
            int rowCount = model.getRowCount();
            int colCount = model.getColumnCount();

            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < colCount; j++) {
                    writer.print(model.getValueAt(i, j));
                    if (j < colCount - 1) {
                        writer.print(",");
                    }
                }
                writer.println();
            }
        } catch (IOException e) {
            e.printStackTrace();  // Handle IOException appropriately
        }
    }
    
    private void saveDataToFile3() {
        DefaultTableModel model = (DefaultTableModel) tbProduct3.getModel();

        try (PrintWriter writer = new PrintWriter("C:\\Users\\ACER\\OneDrive - Rajamangala University of Technology Lanna\\Documents\\osfood.txt")) {
            int rowCount = model.getRowCount();
            int colCount = model.getColumnCount();

            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < colCount; j++) {
                    writer.print(model.getValueAt(i, j));
                    if (j < colCount - 1) {
                        writer.print(",");
                    }
                }
                writer.println();
            }
        } catch (IOException e) {
            e.printStackTrace();  // Handle IOException appropriately
        }
    }
    
    private void loadDataFromFile1() {
        DefaultTableModel model = (DefaultTableModel) tbProduct1.getModel();
        model.setRowCount(0);  // Clear existing rows

        try (BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\ACER\\OneDrive - Rajamangala University of Technology Lanna\\Documents\\osart.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                model.addRow(data);
            }
        } catch (IOException e) {
            e.printStackTrace();  // Handle IOException appropriately
        }
    }
    
    private void loadDataFromFile2() {
        DefaultTableModel model = (DefaultTableModel) tbProduct2.getModel();
        model.setRowCount(0);  // Clear existing rows

        try (BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\ACER\\OneDrive - Rajamangala University of Technology Lanna\\Documents\\oselectronic.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                model.addRow(data);
            }
        } catch (IOException e) {
            e.printStackTrace();  // Handle IOException appropriately
        }
    }
    
    private void loadDataFromFile3() {
        DefaultTableModel model = (DefaultTableModel) tbProduct3.getModel();
        model.setRowCount(0);  // Clear existing rows

        try (BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\ACER\\OneDrive - Rajamangala University of Technology Lanna\\Documents\\osfood.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                model.addRow(data);
            }
        } catch (IOException e) {
            e.printStackTrace();  // Handle IOException appropriately
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Product().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextField TFPrice;
    private javax.swing.JTextField TFProduct;
    private javax.swing.JButton bAdd;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bUpdate;
    private javax.swing.JComboBox<String> cdCategory;
    private javax.swing.JLabel iMassage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel massage;
    private javax.swing.JTable tbProduct;
    private javax.swing.JTable tbProduct1;
    private javax.swing.JTable tbProduct2;
    private javax.swing.JTable tbProduct3;
    // End of variables declaration                   
}
